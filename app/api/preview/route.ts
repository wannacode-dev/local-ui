import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const file = searchParams.get('file')
    const liveReload = searchParams.get('live') === 'true'
    
    if (!file) {
      return NextResponse.json({ error: 'File parameter is required' }, { status: 400 })
    }

    const projectRoot = process.cwd()
    const playgroundPath = path.join(projectRoot, 'playground')
    const srcPath = path.join(projectRoot, 'src')
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å src/ –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanFile = file.replace(/^src\//, '')
    const filePath = path.join(playgroundPath, cleanFile)
    const srcFilePath = path.join(srcPath, cleanFile)
    
    let content: string
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ playground
    if (fs.existsSync(filePath)) {
      content = fs.readFileSync(filePath, 'utf-8')
    } else if (fs.existsSync(srcFilePath)) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ src, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ playground
      content = fs.readFileSync(srcFilePath, 'utf-8')
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const playgroundDir = path.dirname(filePath)
      if (!fs.existsSync(playgroundDir)) {
        fs.mkdirSync(playgroundDir, { recursive: true })
      }
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ playground
      fs.writeFileSync(filePath, content, 'utf-8')
    } else {
      return NextResponse.json({ error: 'File not found' }, { status: 404 })
    }
    const extension = path.extname(file).toLowerCase()
    
    // –°–æ–∑–¥–∞–µ–º HTML –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    let wrappedContent: string
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è live reload, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
    const liveReloadScript = liveReload ? `
    <script>
      // Live reload functionality
      let lastContent = null;
      let isReloading = false;
      
      async function checkForChanges() {
        if (isReloading) return;
        
        try {
          const response = await fetch('/api/playground?file=${encodeURIComponent(file)}&t=' + Date.now());
          
          if (response.ok) {
            const newContent = await response.text();
            
            if (lastContent === null) {
              lastContent = newContent;
            } else if (lastContent !== newContent) {
              console.log('File changed, reloading...');
              isReloading = true;
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
              const notification = document.createElement('div');
              notification.innerHTML = 'üîÑ –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º...';
              notification.style.cssText = \`
                position: fixed;
                top: 50px;
                right: 10px;
                background: #f59e0b;
                color: white;
                padding: 12px 16px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 600;
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease;
              \`;
              document.body.appendChild(notification);
              
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            }
          }
        } catch (error) {
          // –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏ - –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
          if (!window.lastErrorLog || Date.now() - window.lastErrorLog > 10000) {
            console.warn('Live reload check failed:', error);
            window.lastErrorLog = Date.now();
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã (—É–º–µ–Ω—å—à–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É)
      const interval = setInterval(checkForChanges, 3000);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä live reload
      const indicator = document.createElement('div');
      indicator.innerHTML = 'üîÑ Live Reload –∞–∫—Ç–∏–≤–µ–Ω';
      indicator.style.cssText = \`
        position: fixed;
        top: 10px;
        right: 10px;
        background: #10b981;
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        z-index: 9999;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        cursor: pointer;
      \`;
      
      // –ü–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å live reload –ø–æ –∫–ª–∏–∫—É
      indicator.addEventListener('click', () => {
        clearInterval(interval);
        indicator.innerHTML = '‚è∏Ô∏è Live Reload –≤—ã–∫–ª—é—á–µ–Ω';
        indicator.style.background = '#6b7280';
      });
      
      document.body.appendChild(indicator);
      
      // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
      const style = document.createElement('style');
      style.textContent = \`
        @keyframes slideIn {
          from { opacity: 0; transform: translateX(100%); }
          to { opacity: 1; transform: translateX(0); }
        }
      \`;
      document.head.appendChild(style);
      
      // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(checkForChanges, 1000);
    </script>` : ''
    
    switch (extension) {
      case '.html':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ HTML —Ñ–∞–π–ª React –∫–æ–¥
        if (content.includes('React') || content.includes('ReactDOM') || content.includes('type="text/babel"')) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å React, –Ω–æ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ React –∏ Babel, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
          if (!content.includes('react@18') && !content.includes('@babel/standalone')) {
            // –î–æ–±–∞–≤–ª—è–µ–º React –∏ Babel –≤ head
            const reactScripts = `
    <!-- React –∏ Babel –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>`
            
            // –ò—â–µ–º —Ç–µ–≥ head –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–¥ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            if (content.includes('</head>')) {
              wrappedContent = content
                .replace('</head>', `${reactScripts}\n</head>`)
                .replace('</body>', `${liveReloadScript}</body>`)
            } else {
              // –ï—Å–ª–∏ –Ω–µ—Ç head —Ç–µ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
              const headWithScripts = `<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">${reactScripts}
</head>`
              wrappedContent = content
                .replace('<html', `<html`)
                .replace('>', `>${headWithScripts}`)
                .replace('</body>', `${liveReloadScript}</body>`)
            }
          } else {
            wrappedContent = content.replace('</body>', `${liveReloadScript}</body>`)
          }
        } else {
          wrappedContent = content.replace('</body>', `${liveReloadScript}</body>`)
        }
        break
        
      case '.js':
        wrappedContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä - ${path.basename(file)}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            margin: 0;
            padding: 20px;
            background: #f8fafc;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        .header {
            background: #3b82f6;
            color: white;
            padding: 16px 24px;
            font-weight: 600;
        }
        .content {
            padding: 24px;
        }
        #output {
            border: 1px solid #e2e8f0;
            border-radius: 4px;
            padding: 16px;
            margin-top: 16px;
            min-height: 200px;
            background: #f8fafc;
        }
        .error {
            color: #dc2626;
            background: #fef2f2;
            border: 1px solid #fecaca;
            padding: 12px;
            border-radius: 4px;
            margin-top: 16px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: ${path.basename(file)}
        </div>
        <div class="content">
            <div id="output">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
    </div>
    
    <script>
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –∫–æ–¥
            const output = document.getElementById('output');
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log
            const originalLog = console.log;
            const logs = [];
            console.log = function(...args) {
                logs.push(args.join(' '));
                originalLog.apply(console, args);
                updateOutput();
            };
            
            function updateOutput() {
                if (logs.length > 0) {
                    output.innerHTML = '<h3>–í—ã–≤–æ–¥ –∫–æ–Ω—Å–æ–ª–∏:</h3><pre>' + logs.join('\\n') + '</pre>';
                } else {
                    output.innerHTML = '<p>–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞.</p>';
                }
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            ${content}
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (logs.length === 0) {
                updateOutput();
            }
            
                 } catch (error) {
             document.getElementById('output').innerHTML = 
                 '<div class="error"><strong>–û—à–∏–±–∫–∞:</strong> ' + error.message + '</div>';
         }
     </script>
     ${liveReloadScript}
 </body>
 </html>`
        break
        
      case '.jsx':
        wrappedContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React JSX - ${path.basename(file)}</title>
    
    <!-- React –∏ Babel -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            background: #ffffff;
        }
        #root {
            min-height: 100vh;
            width: 100%;
        }
        .error {
            color: #dc2626;
            background: #fef2f2;
            border: 1px solid #fecaca;
            padding: 20px;
            margin: 20px;
            border-radius: 8px;
            font-family: monospace;
            white-space: pre-wrap;
        }
        
        /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        button {
            cursor: pointer;
            border: none;
            outline: none;
            font-family: inherit;
        }
        
        button:hover {
            opacity: 0.9;
        }
        
        * {
            box-sizing: border-box;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <script type="text/babel">
        try {
            ${content}
        } catch (error) {
            console.error('React Error:', error);
            document.getElementById('root').innerHTML = 
                '<div class="error"><strong>–û—à–∏–±–∫–∞ React:</strong>\\n' + error.message + '</div>';
        }
    </script>
    
    ${liveReloadScript}
</body>
</html>`
        break
        
      case '.ts':
      case '.tsx':
        wrappedContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä - ${path.basename(file)}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f8fafc; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); padding: 24px; }
        .header { color: #3b82f6; font-weight: 600; margin-bottom: 16px; }
        pre { background: #f8fafc; padding: 16px; border-radius: 4px; overflow-x: auto; }
        .note { background: #fef3c7; border: 1px solid #f59e0b; padding: 12px; border-radius: 4px; margin-top: 16px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">TypeScript —Ñ–∞–π–ª: ${path.basename(file)}</div>
        <div class="note">
            <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> TypeScript —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –ü–æ–∫–∞–∑–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.
                 </div>
         <pre><code>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
     </div>
     ${liveReloadScript}
 </body>
 </html>`
        break
        
      case '.css':
        wrappedContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä CSS - ${path.basename(file)}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f8fafc; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); overflow: hidden; }
        .header { background: #10b981; color: white; padding: 16px 24px; font-weight: 600; }
        .demo { padding: 24px; border-bottom: 1px solid #e2e8f0; }
        .code { padding: 24px; background: #f8fafc; }
        pre { margin: 0; overflow-x: auto; }
        
        /* –ü—Ä–∏–º–µ–Ω—è–µ–º CSS */
        ${content}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            CSS –°—Ç–∏–ª–∏: ${path.basename(file)}
        </div>
        <div class="demo">
            <h3>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π</h3>
            <div class="demo-content">
                <p>–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ CSS —Å—Ç–∏–ª–µ–π.</p>
                <button>–ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏</button>
                <div style="width: 100px; height: 100px; background: #3b82f6; margin: 16px 0;"></div>
            </div>
        </div>
                 <div class="code">
             <h3>–ö–æ–¥ CSS:</h3>
             <pre><code>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
         </div>
     </div>
     ${liveReloadScript}
 </body>
 </html>`
        break
        
      default:
        wrappedContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä - ${path.basename(file)}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f8fafc; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); padding: 24px; }
        .header { color: #64748b; font-weight: 600; margin-bottom: 16px; }
        pre { background: #f8fafc; padding: 16px; border-radius: 4px; overflow-x: auto; }
    </style>
</head>
<body>
         <div class="container">
         <div class="header">–§–∞–π–ª: ${path.basename(file)}</div>
         <pre><code>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>
     </div>
     ${liveReloadScript}
 </body>
 </html>`
    }

    return new NextResponse(wrappedContent, {
      headers: {
        'Content-Type': 'text/html; charset=utf-8',
      },
    })

  } catch (error) {
    console.error('Error generating preview:', error)
    return NextResponse.json({ error: 'Failed to generate preview' }, { status: 500 })
  }
} 