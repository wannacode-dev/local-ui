import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'
import { loadServerConfig, clearServerConfigCache } from '@/app/lib/config-loader'

export const dynamic = 'force-dynamic'

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
const MOCK_DATA: Record<string, unknown> = {
  books: [
    { id: 1, name: "React –≤ –¥–µ–π—Å—Ç–≤–∏–∏" },
    { id: 2, name: "JavaScript: –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ" },
    { id: 3, name: "CSS –¥–ª—è –ø—Ä–æ—Ñ–∏" }
  ],
  'books/1': { id: 1, name: "React –≤ –¥–µ–π—Å—Ç–≤–∏–∏", author: "–ú–∞—Ä–∫ –¢–∏–ª–µ–Ω –¢–æ–º–∞—Å", price: "2500 —Ä—É–±." },
  'books/2': { id: 2, name: "JavaScript: –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", author: "–î—ç–≤–∏–¥ –§–ª—ç–Ω–∞–≥–∞–Ω", price: "3200 —Ä—É–±." },
  'books/3': { id: 3, name: "CSS –¥–ª—è –ø—Ä–æ—Ñ–∏", author: "–ö–∏—Ç –ì—Ä–∞–Ω—Ç", price: "1800 —Ä—É–±." }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async function scanDirectory(dir: string): Promise<any[]> {
  try {
    await fs.access(dir)
  } catch {
    return []
  }

  const items = await fs.readdir(dir)
  const tasks: any[] = []

  for (const item of items) {
    const fullPath = path.join(dir, item)
    const stat = await fs.stat(fullPath)

    if (stat.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      tasks.push(...await scanDirectory(fullPath))
    } else if (item.includes('.problem.') && 
              (item.endsWith('.html') || item.endsWith('.js') || item.endsWith('.jsx'))) {
      // –ù–∞—à–ª–∏ —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è
      try {
        const content = await fs.readFile(fullPath, 'utf-8')
        const projectRoot = path.join(process.cwd(), '..') // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const srcPath = path.join(projectRoot, 'src')
        const relativePath = path.relative(srcPath, fullPath)
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–º—ã (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
        const pathParts = relativePath.split(path.sep)
        const chapter = pathParts[0]
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ "–ó–∞–¥–∞–Ω–∏–µ:")
        const nameMatch = content.match(/–ó–∞–¥–∞–Ω–∏–µ:\s*([^\n]*)/);
        let name = nameMatch ? nameMatch[1].trim() : item;
        
        // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if (!nameMatch) {
          // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ .problem/.solution
          name = item
            .replace(/^\d+-/, '') // —É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ
            .replace(/\.(problem|solution)\..*$/, '') // —É–±–∏—Ä–∞–µ–º .problem/.solution –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        const descMatch = content.match(/\/\*\s*–ó–∞–¥–∞–Ω–∏–µ:[\s\S]*?\*\//) ||
                        content.match(/<!--\s*–ó–∞–¥–∞–Ω–∏–µ:[\s\S]*?-->/) ||
                        [null, ''];

        tasks.push({
          name: name,
          description: descMatch[0] || '',
          file: relativePath.replace(/\\/g, '/'),
          chapter: chapter
        });
      } catch (error) {
        console.error(`‚ö†Ô∏è   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${path.basename(fullPath)}`);
      }
    }
  }

  return tasks
}

function extractContent(content: string): string {
  // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–µ–º
  content = content.replace(/\/\*\s*–ó–∞–¥–∞–Ω–∏–µ:[\s\S]*?\*\//, '')
  content = content.replace(/<!--\s*–ó–∞–¥–∞–Ω–∏–µ:[\s\S]*?-->/, '')

  // –ï—Å–ª–∏ —ç—Ç–æ HTML —Ñ–∞–π–ª
  if (content.includes('<!DOCTYPE html>') || content.includes('<html')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Ñ–∞–π–ª React
    const usesReact = content.includes('React.') || content.includes('ReactDOM.') || content.includes('text/babel') || content.includes('className=')
    
    if (usesReact) {
      // –î–æ–±–∞–≤–ª—è–µ–º React –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ Babel –≤ head, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      const scripts = `
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>`
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º </head>
      if (!content.includes('react@18') || !content.includes('@babel/standalone')) {
        content = content.replace('</head>', `${scripts}
</head>`)
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π script –±–µ–∑ type="text/babel", –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      content = content.replace(/<script>(\s*const\s+\w+\s*=\s*<[^>]*>)/g, '<script type="text/babel">$1')
    }
    
    return content
  }

  // –î–ª—è JS/JSX —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º HTML –æ–±–µ—Ä—Ç–∫—É
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Task</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body {
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }
        
        button {
            padding: 8px 16px;
            font-size: 14px;
            border-radius: 6px;
            border: 1px solid #e2e8f0;
            background: #f8fafc;
            cursor: pointer;
            margin: 4px;
        }
        button:hover {
            background: #f1f5f9;
        }
        
        ul {
            padding-left: 20px;
        }
        
        li {
            margin: 8px 0;
        }

        .task-error {
            padding: 16px;
            margin: 16px 0;
            border-radius: 8px;
            background: #fee2e2;
            color: #ef4444;
            border: 1px solid #fca5a5;
        }
        .task-warning {
            padding: 16px;
            margin: 16px 0;
            border-radius: 8px;
            background: #fef3c7;
            color: #d97706;
            border: 1px solid #fcd34d;
        }
        .task-success {
            padding: 16px;
            margin: 16px 0;
            border-radius: 8px;
            background: #dcfce7;
            color: #15803d;
            border: 1px solid #86efac;
        }
    </style>
</head>
<body>
    <div id="root"></div>
    <script>
        // –ú–æ–∫ –¥–ª—è fetch API
        const originalFetch = window.fetch;
        window.fetch = function(url, options) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥
            if (url === 'http://localhost:3000/api/books') {
                return Promise.resolve({
                    ok: true,
                    json: () => Promise.resolve(${JSON.stringify(MOCK_DATA.books)})
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–µ
            const bookMatch = url.match(/http:\/\/localhost:3000\/api\/books\/(\d+)$/);
            if (bookMatch) {
                const bookId = bookMatch[1];
                const bookData = ${JSON.stringify(MOCK_DATA)}['books/' + bookId];
                if (bookData) {
                    return Promise.resolve({
                        ok: true,
                        json: () => Promise.resolve(bookData)
                    });
                }
                return Promise.resolve({
                    ok: false,
                    status: 404,
                    statusText: 'Book not found'
                });
            }
            
            return originalFetch(url, options);
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ React
        window.addEventListener('error', function(event) {
            const root = document.getElementById('root');
            root.innerHTML = '<div class="task-error"><strong>–û—à–∏–±–∫–∞:</strong><br/>' + event.error?.message + '</div>';
        });
    </script>
    <script type="text/babel">
        ${content}
    </script>
</body>
</html>`
}

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const file = searchParams.get('file')
    
    // –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ
    console.log('\nüöÄ ‚ïê‚ïê‚ïê API REQUEST ‚ïê‚ïê‚ïê')
    console.log(`üìÑ  –§–∞–π–ª: ${file || '—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π'}`)
    if (file) {
      const decodedFile = decodeURIComponent(file)
      console.log(`üéØ  Decoded: ${decodedFile}`)
    }
    
    if (!file) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
      try {
        const projectRoot = path.join(process.cwd(), '..') // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const srcPath = path.join(projectRoot, 'src')
        
        console.log(`üìÅ  –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${srcPath}`)
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        const allTasks = await scanDirectory(srcPath)
        console.log(`‚úÖ  –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${allTasks.length}`)
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
        const chapters: { [key: string]: any } = {}
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        clearServerConfigCache()
        const config = await loadServerConfig()
        
        console.log(`‚öôÔ∏è   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${config.title}`)
        
        allTasks.forEach(task => {
          if (!chapters[task.chapter]) {
            const translatedChapter = config.chapterTranslations[task.chapter] || task.chapter
            console.log(`üîÑ  –ì–ª–∞–≤–∞: ${translatedChapter}`)
            chapters[task.chapter] = {
              chapter: translatedChapter,
              originalChapter: task.chapter,
              tasks: []
            }
          }
          chapters[task.chapter].tasks.push({
            name: task.name,
            description: task.description,
            file: task.file
          })
        })

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        const result = Object.values(chapters)
          .sort((a: any, b: any) => a.originalChapter.localeCompare(b.originalChapter))

        console.log(`üìö  –í—Å–µ–≥–æ —Ç–µ–º: ${result.length}`)
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n')
        return NextResponse.json(result)
      } catch (error) {
        console.error(`üí•  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π: ${error}`)
        console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n')
        return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π' }, { status: 500 })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ª–∏ API
    if (file.includes('/api/')) {
      const endpoint = file.split('/api/')[1].replace(/\/$/, '') // –£–±–∏—Ä–∞–µ–º trailing slash

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–µ
      const booksMatch = endpoint.match(/^books\/(\d+)$/)
      if (booksMatch) {
        const bookId = booksMatch[1]
        const bookData = MOCK_DATA[`books/${bookId}`]
        if (bookData) {
          return NextResponse.json(bookData)
        }
        return new NextResponse('Book not found', { status: 404 })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥
      if (endpoint === 'books') {
        return NextResponse.json(MOCK_DATA.books)
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ API endpoints
      if (endpoint in MOCK_DATA) {
        return NextResponse.json(MOCK_DATA[endpoint])
      }
      return new NextResponse('API endpoint not found', { status: 404 })
    }

    console.log(`\nüìñ ‚ïê‚ïê‚ïê –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–ê ‚ïê‚ïê‚ïê`)
    console.log(`üìÑ  –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${decodeURIComponent(file)}`)

    // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–±–º–æ–¥—É–ª—è
    const projectRoot = path.join(process.cwd(), '..') // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const filePath = path.join(projectRoot, file)
    console.log(`üóÇÔ∏è   –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: ${filePath}`)

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      await fs.access(filePath)
    } catch (error) {
      console.error(`‚ùå  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${decodeURIComponent(file)}`)
      console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n')
      return new NextResponse('File not found', { status: 404 })
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const content = await fs.readFile(filePath, 'utf-8')

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const processedContent = extractContent(content)
    console.log(`‚úÖ  –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`)
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n')

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const headers = {
      'Content-Type': 'text/html; charset=utf-8',
      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0',
      'Pragma': 'no-cache',
      'Expires': '-1',
      'X-File-Path': encodeURIComponent(filePath), // –ö–æ–¥–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞
      'X-Content-Length': processedContent.length.toString()
    }

    return new NextResponse(processedContent, { headers })
  } catch (error: any) {
    console.error(`\nüí• ‚ïê‚ïê‚ïê –û–®–ò–ë–ö–ê ‚ïê‚ïê‚ïê`)
    console.error(`‚ùå  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    console.error('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n')
    return new NextResponse(`Error reading file: ${error?.message || 'Unknown error'}`, { status: 500 })
  }
} 