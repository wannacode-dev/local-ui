#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  blue: '\x1b[34m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
function compareVersions(current, required) {
  const currentParts = current.split('.').map(Number);
  const requiredParts = required.split('.').map(Number);
  
  for (let i = 0; i < Math.max(currentParts.length, requiredParts.length); i++) {
    const currentPart = currentParts[i] || 0;
    const requiredPart = requiredParts[i] || 0;
    
    if (currentPart > requiredPart) return 1;
    if (currentPart < requiredPart) return -1;
  }
  return 0;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π Node.js –∏ npm
function checkVersions() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    const nodeVersion = process.version.replace('v', '');
    if (compareVersions(nodeVersion, REQUIREMENTS.node) < 0) {
      log(`‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js ${REQUIREMENTS.node}+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${nodeVersion}`, 'red');
      return false;
    }
    log(`‚úÖ Node.js ${nodeVersion} - OK`, 'green');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º npm
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    if (compareVersions(npmVersion, REQUIREMENTS.npm) < 0) {
      log(`‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è npm ${REQUIREMENTS.npm}+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${npmVersion}`, 'red');
      return false;
    }
    log(`‚úÖ npm ${npmVersion} - OK`, 'green');

    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π: ${error.message}`, 'red');
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
async function createFullBackup() {
  const backupDir = path.join(process.cwd(), '.backup-' + Date.now());
  
  try {
    log('üíæ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞...', 'blue');
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ node_modules –∏ .git
    const itemsToBackup = fs.readdirSync(process.cwd()).filter(item => 
      !['node_modules', '.git', '.next', '.backup-*'].some(exclude => 
        item.startsWith(exclude.replace('*', ''))
      )
    );
    
    fs.ensureDirSync(backupDir);
    
    for (const item of itemsToBackup) {
      const srcPath = path.join(process.cwd(), item);
      const destPath = path.join(backupDir, item);
      fs.copySync(srcPath, destPath);
    }
    
    log(`üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${path.basename(backupDir)}`, 'green');
    return backupDir;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${error.message}`, 'red');
    throw error;
  }
}

// –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –±—ç–∫–∞–ø–∞
async function rollbackFromBackup(backupDir) {
  try {
    log('üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞...', 'yellow');
    
    if (!fs.existsSync(backupDir)) {
      throw new Error('–ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞
    const itemsToRestore = fs.readdirSync(backupDir);
    
    for (const item of itemsToRestore) {
      const srcPath = path.join(backupDir, item);
      const destPath = path.join(process.cwd(), item);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
      if (fs.existsSync(destPath)) {
        fs.removeSync(destPath);
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
      fs.copySync(srcPath, destPath);
    }
    
    log('‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'green');
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: ${error.message}`, 'red');
    return false;
  }
}

// URL template —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
const TEMPLATE_REPO = 'https://github.com/wannacode-dev/local-ui.git';

// –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ template
const FILES_TO_UPDATE = [
  'app/',
  'package.json',
  'next.config.js',
  'tsconfig.json',
  'next-env.d.ts',
  '.gitignore'
];

// –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ —Ç—Ä–æ–≥–∞—Ç—å (–∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞)
const PRESERVE_FILES = [
  'src/',
  'README.md',
  '.git/',
  'node_modules/'
];

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–µ—Ä—Å–∏—è–º
const REQUIREMENTS = {
  node: '16.0.0',
  npm: '8.0.0'
};

async function updateCourse() {
  log('üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∏–∑ template —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...', 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    log('‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.', 'red');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ Node.js –∏ npm
  log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏...', 'blue');
  if (!checkVersions()) {
    log('‚ùå –û–±–Ω–æ–≤–∏—Ç–µ Node.js –∏ npm –¥–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö –≤–µ—Ä—Å–∏–π', 'red');
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
  let backupDir;
  try {
    backupDir = await createFullBackup();
  } catch (error) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.', 'red');
    process.exit(1);
  }

  // –£–¥–∞–ª—è–µ–º –∫—ç—à Next.js –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const nextCacheDir = path.join(process.cwd(), '.next');
  if (fs.existsSync(nextCacheDir)) {
    log('üßπ –û—á–∏—â–∞–µ–º –∫—ç—à Next.js...', 'blue');
    try {
      fs.removeSync(nextCacheDir);
      log('‚úÖ –ö—ç—à Next.js –æ—á–∏—â–µ–Ω', 'green');
    } catch (error) {
      log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Next.js (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)', 'yellow');
    }
  }

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  const tempDir = path.join(process.cwd(), '.temp-update');
  
  try {
    log('üì° –ö–ª–æ–Ω–∏—Ä—É–µ–º template —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...', 'blue');
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync(tempDir)) {
      fs.removeSync(tempDir);
    }
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º template
    execSync(`git clone --depth 1 "${TEMPLATE_REPO}" "${tempDir}"`, { 
      stdio: 'pipe' 
    });
    
    log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –∫—É—Ä—Å–∞...', 'blue');
    
    // –°–æ–∑–¥–∞–µ–º backup –ø–∞–ø–∫—É
    const backupDir = path.join(tempDir, 'backup');
    fs.ensureDirSync(backupDir);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è
    for (const preserveFile of PRESERVE_FILES) {
      const srcPath = path.join(process.cwd(), preserveFile);
      const backupPath = path.join(backupDir, preserveFile);
      
      if (fs.existsSync(srcPath)) {
        log(`  üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${preserveFile}`, 'yellow');
        fs.copySync(srcPath, backupPath);
      }
    }
    
    log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...', 'blue');
    
    // –ö–æ–ø–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ template
    for (const fileToUpdate of FILES_TO_UPDATE) {
      const srcPath = path.join(tempDir, fileToUpdate);
      const destPath = path.join(process.cwd(), fileToUpdate);
      
      if (fs.existsSync(srcPath)) {
        log(`  ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º ${fileToUpdate}`, 'green');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞
        if (fileToUpdate.endsWith('/') && fs.existsSync(destPath)) {
          fs.removeSync(destPath);
        }
        
        fs.copySync(srcPath, destPath);
      } else {
        log(`  ‚ö†Ô∏è  –§–∞–π–ª ${fileToUpdate} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ template`, 'yellow');
      }
    }
    
    log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫—É—Ä—Å–∞...', 'blue');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const preserveFile of PRESERVE_FILES) {
      const backupPath = path.join(backupDir, preserveFile);
      const destPath = path.join(process.cwd(), preserveFile);
      
      if (fs.existsSync(backupPath)) {
        log(`  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${preserveFile}`, 'green');
        fs.copySync(backupPath, destPath);
      }
    }
    
    log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...', 'blue');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try {
      execSync('npm install', { stdio: 'inherit' });
      log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å...', 'blue');
    try {
      execSync('npm run lint --silent', { stdio: 'pipe' });
      log('‚úÖ –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', 'green');
    } catch (error) {
      log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)', 'yellow');
    }
    
    log('üéâ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'bold');
    log('\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:', 'blue');
    log('  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É: npm run dev', 'yellow');
    log('  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è', 'yellow');
    log('  3. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:', 'yellow');
    log('     git add .', 'yellow');
    log('     git commit -m "Update platform from template"', 'yellow');
    
    // –û—á–∏—â–∞–µ–º –±—ç–∫–∞–ø –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    if (backupDir && fs.existsSync(backupDir)) {
      try {
        fs.removeSync(backupDir);
        log('üßπ –ë—ç–∫–∞–ø –æ—á–∏—â–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ)', 'blue');
      } catch (error) {
        log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø: ${path.basename(backupDir)}`, 'yellow');
      }
    }
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, 'red');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (backupDir) {
      log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è...', 'yellow');
      const rollbackSuccess = await rollbackFromBackup(backupDir);
      
      if (rollbackSuccess) {
        log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—á–µ–Ω—ã, –ø—Ä–æ–µ–∫—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏', 'green');
        log(`üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${path.basename(backupDir)}`, 'blue');
      } else {
        log('‚ùå –û—Ç–∫–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤—Ä—É—á–Ω—É—é –∏–∑ –±—ç–∫–∞–ø–∞:', 'red');
        log(`üìÅ –ë—ç–∫–∞–ø: ${backupDir}`, 'yellow');
      }
    } else {
      log('‚ùå –ë—ç–∫–∞–ø –Ω–µ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.', 'red');
    }
    
    process.exit(1);
  } finally {
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (fs.existsSync(tempDir)) {
      try {
        fs.removeSync(tempDir);
        log('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã', 'blue');
      } catch (error) {
        log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', 'yellow');
      }
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å git
try {
  execSync('git --version', { stdio: 'pipe' });
} catch (error) {
  log('‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.', 'red');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateCourse(); 